name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx jest --coverage --runInBand
        env:
          CI: true

      - name: Show coverage summary (for logs)
        run: |
          echo "=== coverage/coverage-summary.json ==="
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json
          else
            echo "No coverage summary found"
          fi

      - name: Upload coverage to Codecov (tokened)
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unit
          fail_ci_if_error: true
          token: ${{ env.CODECOV_TOKEN }}

      - name: Upload coverage to Codecov (tokenless via GitHub App)
        if: env.CODECOV_TOKEN == ''
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unit
          fail_ci_if_error: false

      - name: Upload coverage artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  e2e-tests:
    name: E2E tests (Playwright)
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      PLAYWRIGHT_BASE_URL: http://127.0.0.1:5500
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests (start http-server + produce JSON report)
        run: |
          mkdir -p test-results
          # start a static server in background
          npx http-server ./ -p 5500 -s > server.log 2>&1 &
          server_pid=$!
          echo "Server started with PID $server_pid"
          sleep 2 # give server time to start
          # run playwright and save JSON output to file (preserve exit code)
          npx playwright test --reporter=json > test-results/results.json
          exit_code=$?
          echo "Playwright exit code: $exit_code"
          # stop server
          kill $server_pid || true
          wait $server_pid 2>/dev/null || true
          # exit with Playwright's exit code so job fails when tests fail
          exit $exit_code

      - name: Upload Playwright results artifact (JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
          retention-days: 7

      - name: "Upload Playwright artifacts (report directory: screenshots/videos) (on failure)"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  lighthouse:
    name: Lighthouse audit + publish badges
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x

      - name: Run LHCI (start server + LHCI)
        run: |
          npx start-server-and-test "npx http-server ./ -p 5500 -s" http://127.0.0.1:5500 "lhci autorun --config=lighthouserc.cjs"

      - name: Download Playwright results artifact
        uses: actions/download-artifact@v4
        with:
          name: playwright-results
          path: ./test-results

      - name: Extract LHCI scores -> badge JSON
        run: node scripts/lhci-to-badges.cjs

      - name: Extract Playwright results -> badge JSON
        run: node scripts/playwright-to-badge.cjs

      - name: Publish badges to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public_badges
          publish_branch: gh-pages

      - name: Upload Lighthouse reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 7

      - name: Show Lighthouse summary
        run: node scripts/lighthouse-summary.cjs || echo "No summary script found"
